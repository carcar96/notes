一、1.C 2.B 3.B 4.B 5.B 6.B 7.B 8.B
二、

1.JSONP原理
ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。

2.当你在浏览器地址栏输入一个URL后回车，将会发生的事情？
大概流程：
（1）浏览器向DNS服务器查找输入URL对应的IP地址。
（2）DNS服务器返回网站的IP地址。
（3）浏览器根据IP地址与目标web服务器在80端口上建立TCP连接
（4）浏览器获取请求页面的html代码。
（5）浏览器在显示窗口内渲染HTML。
（6）窗口关闭时，浏览器终止与服务器的连接。
详细流程：
1、浏览器的url请求
2、递归寻找DNS服务器
3、连接目标IP并建立TCP连接
4、向目标服务器发送http请求
5、web服务器接收请求后处理
6、web服务器返回相应的结果【无效、重定向、正确页面等】
7、浏览器接收返回的http内容
================================前端解析分割线===========================================
8、开始解析html文件，当然是自上而下，先是头部，后是body
9、当解析到头部css外部链接时，同步去下载，如果遇到外部js链接也是下载【不过js链接不建议放在头部，因为耽误页面第一展现时间】
10、接着解析body部分，边解析边开始生成对应的DOM树，同时等待css文件下载
11、一旦css文件下载完毕，那么就同步去用已经生成的DOM节点+CSS去生成渲染树
12、渲染树一旦有结构模型了，接着就会同步去计算渲染树节点的布局位置
13、一旦计算出来渲染的坐标后，又同步去开始渲染
14、10-13步进行过程中如果遇到图片则跳过去渲染下面内容，等待图片下载成功后会返回来在渲染原来图片的位置
15、同14步，如果渲染过程中出现js代码调整DOM树机构的情况，也会再次重新来过，从修改DOM那步开始
16、最终所有节点和资源都会渲染完成
=========================================分析结束分割线==============================================
17、渲染完成后开始page的onload事件
18、整个页面load完成


3、为什么利用多个域名来提供网站资源更有效？浏览器同一时间可以从一个域名下载多少资源？

1. CDN缓存更方便

CDN：是构建在网络之上的内容发布网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容发布、调度等功能模块，是用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要是内容存储和分布技术。简单来说，CDN主要用来使用户就近获取资源。

2. 突破浏览器并发限制

同一时间针对同一域名下的请求有一定数量限制，超过限制数目的请求会被阻塞。大多数浏览器的并发数量都控制在6以内。有些资源的请求时间很长，因而会阻塞其他资源的请求。因此，对于一些静态资源，如果放到不同的域名下面就能实现与其他资源的并发请求。因而后来衍生了domain dash来加大并发数，但是过多的域名会使DNS解析负担加重，因此一般控制在2-4个。
对于图片资源的加载，利用css sprites技术，结合background的定位在同一张图片中加载多个图片，这也是减少并发数量的一种常用方法。

3. 节约cookie带宽

twitter 的主站 http://twitter.com ，用户的每次访问，都会带上自己的cookie ，挺大的。假如twitter 的图片放在主站域名下，那么用户每次访问图片时，request header 里就会带有自己的cookie ，header 里的cookie 还不能压缩，而图片是不需要知道用户的cookie 的，所以这部分带宽就白白浪费了。 
写主站程序时，set-cookie 也不要set 到图片的域名上。 
在小流量的网站，这个cookie 其实节省不了多少带宽，当流量如facebook twitter 时，节省下来就很可观了。

4. 节约主域名的连接数，优化页面响应速度

5. 防止不必要的安全问题


三、
1、cookie弊端

（1）增加流量消耗，每次请求都需要带上cookie信息。

（2）安全性隐患，cookie使用明文传输。如果cookie被人拦截了，那人就可以取得所有的session信息。

（3）Cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。

2、display:none与visibility:hidden的区别

（1)display:none不占空间、会引起回流和重绘、该元素不被渲染。
（2）visibility:hidden占空间、会引起回流、该元素被渲染。

3、CSS盒子模型。

概念：css盒子模型又称框模型 (Box Model) ，包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素。

在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度。

标准盒子模型的盒子宽度：左右margin+左右border+左右padding+width
IE盒子模型的盒子宽度：左右margin+width

4、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？CSS新增了哪些特性？
CSS 选择符：

1)      id选择器(# myid)

2)      类选择器(.myclassname)

3)      标签选择器(div, h1, p)

4)      相邻选择器(h1 + p)

5)      子选择器(ul > li)

6)      后代选择器(li a)

7)      通配符选择器( * )

8)      属性选择器(a[rel = "external"])

9)      伪类选择器(a: hover, li:nth-child)

可继承的样式：

1)      font-size

2)      font-family

3)      color

4)      text-indent

不可继承的样式：

1)      border

2)      padding

3)      margin

4)      width

5)      height

优先级算法：

1)      优先级就近原则，同权重情况下样式定义最近者为准;

2)      载入样式以最后载入的定位为准;

3)      3.!important >  id > class > tag  

4)      important 比 内联优先级高，但内联比 id 要高

CSS3新增伪类举例：

1)      p:first-of-type  选择属于其父元素的首个 <p> 元素的每个 <p> 元素。

2)      p:last-of-type   选择属于其父元素的最后 <p> 元素的每个 <p> 元素。

3)      p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。

4)      p:only-child     选择属于其父元素的唯一子元素的每个 <p> 元素。

5)      p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。

6)      :enabled :disabled 控制表单控件的禁用状态。

7)      :checked         单选框或复选框被选中。

CSS3有哪些新特性？

1)    CSS3实现圆角（border-radius），阴影（box-shadow），

2)    对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）

3)    transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜

4)    增加了更多的CSS选择器  多背景 rgba 

5)    在CSS3中唯一引入的伪元素是 ::selection.

6)    媒体查询，多栏布局

7)    border-image

5、性能优化方法。

1.减少Http请求
	使用图片地图
	使用CSS Sprites
	合并JS和CSS文件
这个是由于浏览器对同一个host有并行下载的限制,http请求越多，总体下载速度越慢。
2.使用CDN(内容发布网络)：当页面中有很多资源的时候，可以从不同的服务中去读取，同时可以提高并行下载速度
3.添加http Expires头：为图片视频之类很少改变的资源设置长的Expires时间将直接减少http请求
   如果资源设置了Expires头为将来的某个时间，下次访问时候浏览器发现资源还没有过期，会直接从缓存中读取，不会再次产生http请求。
另外一个有点类似的概念是条件Get请求，某些资源比如JS文件，如果我们总是需要最新的JS文件，那么可以设置条件Get请求去服务端验证本地的资源是否需要更新。这种情况下浏览器会向Server发送一个http请求，如果资源没有更新，会返回一个http 304的response，如果资源跟新,则重新下载资源。
4.压缩组件：在Server端对Response资源进行压缩再传给浏览器，一般使用GZIP
5.将CSS放再顶部： 能加快页面内容显示,并且能避免页面产生白屏
6.将JS放在底部
	JS会阻塞对其后面内容的呈现
	JS会阻塞对其后面内容的下载
7.避免CSS表达式
8.将JS，CSS放在外部文件中
9.通过使用Keep-Alive和较少的域名来减少DNS查找
10.精简JS和CSS文件
11.寻找一种避免重定向的方法
12.移除重复的脚本
13.配置Etag
14.确保Ajax请求遵守性能知道,必要时候应具备长久的expires头

6、html常见兼容性问题
1.双边距BUG float引起的  使用display

2.3像素问题 使用float引起的 使用dislpay:inline -3px  

3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active

4.IE z-index问题 给父级添加position:relative

5.Png 透明 使用js代码 改

6.Min-height 最小高度 ！Important 解决’

7.select 在ie6下遮盖 使用iframe嵌套

8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）

9.IE5-8不支持opacity，解决办法：

.opacity {
    opacity: 0.4
    filter: alpha(opacity=60); /* for IE5-7 */
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"; /* for IE 8*/
}

10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片

7、简述http请求中GET和POST的区别。
答：
get是从服务器上获取数据，post是向服务器传送数据。
get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTPpost机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。
对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。
get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。（这里有看到其他文章介绍get和post的传送数据大小跟各个浏览器、操作系统以及服务器的限制有关）
get安全性非常低，post安全性较高。

8、简述对ajax的理解。
答：Ajax是Asynchronous Javascript And XML的缩写。 
作用：通过Ajax可以使用Javascript语句来调用XMLHttpRequest对象，直接与服务器进行通讯，可以在不重载页面的情况下与服务器交换数据。
ajax的优点：
1、最大的一点是页面无刷新，用户的体验非常好。
2、使用异步方式与服务器通信，具有更加迅速的响应能力。
3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。
4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。
ajax的缺点：
1、ajax不支持浏览器back按钮。
2、安全问题 AJAX暴露了与服务器交互的细节。
3、对搜索引擎的支持比较弱。
4、破坏了程序的异常机制。
5、不容易调试。








