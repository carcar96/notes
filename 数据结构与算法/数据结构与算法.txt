1、二分查找在一个有序序列中的时间复杂度：O（logN）
2、二叉树
先序遍历简单记为：根左右
中序遍历简单记为：左根右
后序遍历简单记为：左右根
3、排序
冒泡排序(复杂度为O(n*n))：依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。
快速排序(时间复杂度为O(n^2))：快速排序（Quicksort）是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
插入排序(时间复杂度为O(n^2))：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。假设第一个元素排好，之后的元素对排好的部分从后向前比较并逐一移动。是稳定的排序方法。
选择排序(时间复杂度为O(n^2))：从未排好的部分的第一个作为最小（最大）的，然后依次和剩余的比较，如果有更小（更大）的，记下下标，以此作为新的最小（最大）值，继续比较，一趟结束后，然后和第一个进行交换。不稳定的排序方法。核心在于:不断的选择剩余元素中的最小者。
堆排序：利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] >= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。